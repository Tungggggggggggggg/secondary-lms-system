"use client";


import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { useClassroom } from "@/hooks/use-classroom";
import { ClassroomResponse } from "@/types/classroom";


export default function ClassroomList() {
  const router = useRouter();
  const { classrooms, isLoading, error, fetchClassrooms } = useClassroom();
  const [statusFilter, setStatusFilter] = useState<"all" | "active" | "archived">("all");
  const [sortBy, setSortBy] = useState<"newest" | "oldest" | "name" | "students">("newest");
  const [searchQuery, setSearchQuery] = useState("");

  // Khi component mount, t·ª± ƒë·ªông l·∫•y danh s√°ch l·ªõp h·ªçc
  // L·∫•y danh s√°ch l·ªõp h·ªçc ch·ªâ 1 l·∫ßn khi component mount
  useEffect(() => {
    fetchClassrooms();
  }, [fetchClassrooms]); // fetchClassrooms ƒë√£ ƒë∆∞·ª£c b·ªçc useCallback n√™n dependency n√†y an to√†n, kh√¥ng g√¢y v√≤ng l·∫∑p

  // Logging l·ªói n·∫øu c√≥
  useEffect(() => {
    if (error) {
      console.error('[ClassroomList] L·ªói:', error);
    }
  }, [error]);

  // Filter v√† sort classrooms
  const filteredAndSortedClassrooms = useMemo(() => {
    if (!classrooms) return [];

    let filtered = [...classrooms];

    // Filter theo status
    if (statusFilter === "active") {
      filtered = filtered.filter((c) => c.isActive);
    } else if (statusFilter === "archived") {
      filtered = filtered.filter((c) => !c.isActive);
    }

    // Filter theo search query
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(
        (c) =>
          c.name.toLowerCase().includes(query) ||
          c.code.toLowerCase().includes(query) ||
          c.description?.toLowerCase().includes(query)
      );
    }

    // Sort
    switch (sortBy) {
      case "name":
        filtered.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case "students":
        filtered.sort(
          (a, b) => (b._count?.students ?? 0) - (a._count?.students ?? 0)
        );
        break;
      case "oldest":
        filtered.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        break;
      case "newest":
      default:
        filtered.sort(
          (a, b) =>
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        break;
    }

    return filtered;
  }, [classrooms, statusFilter, sortBy, searchQuery]);

  if (isLoading) {
    return (
      <div className="grid md:grid-cols-3 gap-6">
        {[1, 2, 3].map((i) => (
          <div
            key={i}
            className="bg-white rounded-2xl shadow-lg p-6 animate-pulse"
          >
            <div className="flex items-center gap-4 mb-4">
              <div className="w-14 h-14 bg-gray-200 rounded-xl"></div>
              <div className="flex-1">
                <div className="h-4 w-2/3 bg-gray-200 rounded mb-2"></div>
                <div className="h-3 w-1/2 bg-gray-200 rounded"></div>
              </div>
            </div>
            <div className="space-y-2">
              <div className="h-3 w-full bg-gray-200 rounded"></div>
              <div className="h-3 w-4/5 bg-gray-200 rounded"></div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-600 font-semibold p-4 bg-red-50 rounded-xl mb-4">
        ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch l·ªõp h·ªçc: {error}
      </div>
    );
  }

  return (
    <>
      {/* Filter & Search */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center gap-4">
          <select
            value={statusFilter}
            onChange={(e) =>
              setStatusFilter(
                e.target.value as "all" | "active" | "archived"
              )
            }
            className="px-4 py-2 bg-white rounded-xl border border-gray-200"
          >
            <option value="all">T·∫•t c·∫£ l·ªõp h·ªçc</option>
            <option value="active">ƒêang ho·∫°t ƒë·ªông</option>
            <option value="archived">ƒê√£ l∆∞u tr·ªØ</option>
          </select>
          <select
            value={sortBy}
            onChange={(e) =>
              setSortBy(
                e.target.value as "newest" | "oldest" | "name" | "students"
              )
            }
            className="px-4 py-2 bg-white rounded-xl border border-gray-200"
          >
            <option value="newest">M·ªõi nh·∫•t</option>
            <option value="oldest">C≈© nh·∫•t</option>
            <option value="name">Theo t√™n</option>
            <option value="students">S·ªë h·ªçc sinh</option>
          </select>
        </div>
        <div className="relative">
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="T√¨m ki·∫øm l·ªõp h·ªçc..."
            className="pl-10 pr-4 py-2 bg-white rounded-xl border border-gray-200 w-64"
          />
          <span className="absolute left-3 top-2.5">üîç</span>
        </div>
      </div>

      <div className="grid md:grid-cols-3 gap-6">
        {/* Create new classroom card */}
        <div
          onClick={() => router.push("/dashboard/teacher/classrooms/new")}
          className="bg-gradient-to-br from-purple-500 to-indigo-500 rounded-2xl p-6 text-white hover:shadow-xl transition-all cursor-pointer hover:-translate-y-1"
        >
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <div className="text-5xl mb-3">‚ûï</div>
              <h3 className="text-xl font-bold mb-2">T·∫°o l·ªõp h·ªçc m·ªõi</h3>
              <p className="text-white/80">T·∫°o kh√¥ng gian h·ªçc t·∫≠p m·ªõi</p>
            </div>
          </div>
        </div>

        {filteredAndSortedClassrooms.length > 0 ? (
          filteredAndSortedClassrooms.map((classroom: ClassroomResponse) => (
          <div
            key={classroom.id}
            onClick={() => router.push(`/dashboard/teacher/classrooms/${classroom.id}`)}
            className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-all cursor-pointer hover:-translate-y-1"
          >
            <div className="flex items-center justify-between mb-4">
              <div className="w-14 h-14 bg-gradient-to-r from-emerald-400 to-emerald-500 rounded-xl flex items-center justify-center text-2xl">
                {classroom.icon}
              </div>
              <div className="bg-green-100 text-green-600 px-3 py-1 rounded-full text-sm font-medium">
                {classroom.isActive ? 'ƒêang ho·∫°t ƒë·ªông' : 'ƒê√£ l∆∞u tr·ªØ'}
              </div>
            </div>

            <h3 className="text-xl font-bold text-gray-800 mb-2">{classroom.name}</h3>
            <div className="text-sm text-gray-600 mb-4">
              {classroom.description || "Kh√¥ng c√≥ m√¥ t·∫£"}
            </div>
            <div className="flex items-center justify-between text-sm text-gray-600">
              <span>M√£ l·ªõp: {classroom.code}</span>
              <span>{classroom._count?.students ?? 0} h·ªçc sinh</span>
            </div>
          </div>
          ))
        ) : (
          <div className="col-span-3 text-center text-gray-500 py-8">
            {classrooms && classrooms.length > 0
              ? "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc."
              : "Kh√¥ng c√≥ l·ªõp h·ªçc n√†o."}
          </div>
        )}
      </div>
    </>
  );
}
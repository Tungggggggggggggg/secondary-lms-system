import { NextResponse } from 'next/server';
import { z } from 'zod';
import prisma from '@/lib/prisma';
import { sendEmail } from '@/lib/email';
import { generateResetToken } from '@/lib/utils';

// Schema validate body request
const requestSchema = z.object({
  email: z.string().email('Email kh√¥ng h·ª£p l·ªá'),
});

export async function POST(req: Request) {
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi Prisma
    if (!prisma) {
      console.error('Prisma client is not initialized');
      return NextResponse.json(
        { error: 'L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu' },
        { status: 500 }
      );
    }

    const body = await req.json();
    const { email } = requestSchema.parse(body);

    console.log('Processing reset password request for email:', email);

    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i
    const user = await prisma.user.findUnique({ 
      where: { email },
      select: { id: true } // Ch·ªâ l·∫•y id ƒë·ªÉ t·ªëi ∆∞u
    });

    if (!user) {
      console.log('User not found for email:', email);
      return NextResponse.json(
        { error: 'Email n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω' },
        { status: 404 }
      );
    }

    console.log('User found, generating reset token...');

    // T·∫°o token reset (m√£ 6 s·ªë ng·∫´u nhi√™n)
    const token = generateResetToken();

    // L∆∞u th√¥ng tin reset v√†o database
    // Tr∆∞·ªõc khi t·∫°o m·ªõi, x√≥a c√°c y√™u c·∫ßu c≈© ch∆∞a ho√†n th√†nh c·ªßa email n√†y
    await prisma.passwordReset.deleteMany({
      where: {
        email,
        completed: false,
      },
    });

    console.log('Deleted old reset requests');

    await prisma.passwordReset.create({
      data: {
        email,
        token,
        expires: new Date(Date.now() + 10 * 60 * 1000), // 10 ph√∫t
      },
    });

    // G·ª≠i email ch·ª©a m√£ x√°c nh·∫≠n
    await sendEmail({
      to: email,
      subject: 'üîê M√£ x√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
      html: `
        <h2>Xin ch√†o!</h2>
        <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
        <p>ƒê√¢y l√† m√£ x√°c nh·∫≠n c·ªßa b·∫°n:</p>
        <div style="
          background: #f3f4f6;
          padding: 15px;
          border-radius: 8px;
          margin: 20px 0;
          text-align: center;
          font-size: 24px;
          font-weight: bold;
          letter-spacing: 8px;
        ">
          ${token}
        </div>
        <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
        <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
        <br/>
        <p>Tr√¢n tr·ªçng,</p>
        <p>Secondary LMS System</p>
      `,
    });

    return NextResponse.json(
      { message: 'M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng' },
      { status: 200 }
    );
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá', 
          details: error.issues.map(issue => ({
            path: issue.path.join('.'),
            message: issue.message
          }))
        },
        { status: 400 }
      );
    }

    console.error('Error sending reset code:', error);
    return NextResponse.json(
      { error: 'Kh√¥ng th·ªÉ g·ª≠i m√£ x√°c nh·∫≠n' },
      { status: 500 }
    );
  }
}
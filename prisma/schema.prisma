// Schema Prisma cho h·ªá th·ªëng LMS
// T·ªëi ∆∞u h√≥a cho x√°c th·ª±c credentials v√† qu·∫£n l√Ω phi√™n l√†m vi·ªác

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// Enum cho vai tr√≤ ng∆∞·ªùi d√πng
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

// Ki·ªÉu b√†i t·∫≠p
enum AssignmentType {
  ESSAY
  QUIZ
}

// Ki·ªÉu c√¢u h·ªèi tr·∫Øc nghi·ªám
enum QuestionType {
  SINGLE
  MULTIPLE
}

// Model User - Qu·∫£n l√Ω th√¥ng tin ng∆∞·ªùi d√πng
model User {
  // Th√¥ng tin x√°c th·ª±c
  id       String  @id @default(cuid())
  email    String  @unique // Email d√πng ƒë·ªÉ ƒëƒÉng nh·∫≠p
  password String  // M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a

  // Th√¥ng tin c√° nh√¢n
  fullname String  // H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß
  role     UserRole @default(STUDENT) // Vai tr√≤ ng∆∞·ªùi d√πng

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Quan h·ªá
  sessions Session[]
  teacherClassrooms Classroom[] @relation("TeacherClassrooms") // L·ªõp h·ªçc m√† gi√°o vi√™n t·∫°o
  studentClassrooms ClassroomStudent[] // L·ªõp h·ªçc m√† h·ªçc sinh tham gia
  createdCourses Course[] // Kh√≥a h·ªçc ƒë∆∞·ª£c t·∫°o b·ªüi gi√°o vi√™n
  submissions AssignmentSubmission[] // B√†i n·ªôp c·ªßa h·ªçc sinh
  createdAssignments Assignment[] // B√†i t·∫≠p ƒë∆∞·ª£c t·∫°o b·ªüi gi√°o vi√™n
  questionComments QuestionComment[] // B√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi d√πng ·ªü c√¢u h·ªèi

  @@map("users")
}

// Model Session - Qu·∫£n l√Ω phi√™n ƒëƒÉng nh·∫≠p
model Session {
  // Th√¥ng tin phi√™n
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  // Quan h·ªá v·ªõi User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Model PasswordReset - Qu·∫£n l√Ω y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
model PasswordReset {
  // Th√¥ng tin token reset
  id         String   @id @default(cuid())
  email      String   // Email c·ªßa ng∆∞·ªùi d√πng y√™u c·∫ßu reset
  token      String   @unique // M√£ x√°c th·ª±c 6 s·ªë
  expires    DateTime // Th·ªùi gian h·∫øt h·∫°n c·ªßa m√£
  completed  Boolean  @default(false) // Tr·∫°ng th√°i ƒë√£ reset password ch∆∞a
  
  // Metadata
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("password_resets")
}

// Model Classroom - Qu·∫£n l√Ω th√¥ng tin l·ªõp h·ªçc
model Classroom {
  id          String   @id @default(cuid())
  name        String   // T√™n l·ªõp h·ªçc
  description String?  // M√¥ t·∫£ v·ªÅ l·ªõp h·ªçc
  code        String   @unique // M√£ l·ªõp h·ªçc ƒë·ªÉ h·ªçc sinh tham gia
  icon        String   @default("üìö") // Icon c·ªßa l·ªõp h·ªçc
  maxStudents Int      @default(30) // S·ªë l∆∞·ª£ng h·ªçc sinh t·ªëi ƒëa
  isActive    Boolean  @default(true) // Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa l·ªõp

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Quan h·ªá v·ªõi gi√°o vi√™n t·∫°o l·ªõp
  teacherId   String
  teacher     User     @relation("TeacherClassrooms", fields: [teacherId], references: [id])

  // Quan h·ªá v·ªõi h·ªçc sinh trong l·ªõp v√† kh√≥a h·ªçc
  students    ClassroomStudent[]
  courses     ClassroomCourse[]

  @@map("classrooms")
}

// Model Course - Qu·∫£n l√Ω kh√≥a h·ªçc
model Course {
  id          String   @id @default(cuid())
  title       String   // T√™n kh√≥a h·ªçc
  description String?  // M√¥ t·∫£ kh√≥a h·ªçc
  coverImage  String?  // ·∫¢nh b√¨a kh√≥a h·ªçc

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Quan h·ªá
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  classrooms  ClassroomCourse[] // C√°c l·ªõp h·ªçc c√≥ kh√≥a h·ªçc n√†y
  lessons     Lesson[] // C√°c b√†i h·ªçc trong kh√≥a
  assignments Assignment[] // C√°c b√†i t·∫≠p trong kh√≥a

  @@map("courses")
}

// Model Lesson - Qu·∫£n l√Ω b√†i h·ªçc
model Lesson {
  id          String   @id @default(cuid())
  title       String   // Ti√™u ƒë·ªÅ b√†i h·ªçc
  content     String   @db.Text // N·ªôi dung b√†i h·ªçc
  order       Int      // Th·ª© t·ª± b√†i h·ªçc trong kh√≥a

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Quan h·ªá v·ªõi kh√≥a h·ªçc
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

// Model Assignment - Qu·∫£n l√Ω b√†i t·∫≠p
model Assignment {
  id          String    @id @default(cuid())
  title       String    // Ti√™u ƒë·ªÅ b√†i t·∫≠p
  description String?   @db.Text // M√¥ t·∫£ b√†i t·∫≠p
  dueDate     DateTime? // H·∫°n n·ªôp b√†i
  type        AssignmentType @default(ESSAY)

  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Quan h·ªá
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  courseId    String?
  course      Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  submissions AssignmentSubmission[] // C√°c b√†i n·ªôp c·ªßa h·ªçc sinh

  @@map("assignments")
}

// C√¢u h·ªèi tr·∫Øc nghi·ªám
model Question {
  id           String       @id @default(cuid())
  content      String       @db.Text
  type         QuestionType @default(SINGLE)
  order        Int

  assignmentId String
  assignment   Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  options      Option[]
  comments     QuestionComment[]

  @@map("questions")
}

// Ph∆∞∆°ng √°n tr·∫£ l·ªùi c·ªßa c√¢u h·ªèi tr·∫Øc nghi·ªám
model Option {
  id         String   @id @default(cuid())
  label      String
  content    String   @db.Text
  isCorrect  Boolean  @default(false)
  order      Int

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_options")
}

// B√¨nh lu·∫≠n ·ªü t·ª´ng c√¢u h·ªèi
model QuestionComment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  createdAt  DateTime @default(now())

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("question_comments")
}

// Model AssignmentSubmission - Qu·∫£n l√Ω b√†i n·ªôp
model AssignmentSubmission {
  id          String   @id @default(cuid())
  content     String   @db.Text // N·ªôi dung b√†i n·ªôp
  grade       Float?   // ƒêi·ªÉm s·ªë
  feedback    String?  // Nh·∫≠n x√©t c·ªßa gi√°o vi√™n
  submittedAt DateTime @default(now())

  // Quan h·ªá
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      User      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("assignment_submissions")
}

// Model ClassroomStudent - Quan h·ªá nhi·ªÅu-nhi·ªÅu gi·ªØa Classroom v√† Student
model ClassroomStudent {
  id          String   @id @default(cuid())
  joinedAt    DateTime @default(now())
  
  // Quan h·ªá
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  
  studentId   String
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classroomId, studentId])
  @@map("classroom_students")
}

// Model ClassroomCourse - Quan h·ªá nhi·ªÅu-nhi·ªÅu gi·ªØa Classroom v√† Course
model ClassroomCourse {
  id          String   @id @default(cuid())
  addedAt     DateTime @default(now())

  // Quan h·ªá
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  courseId    String 
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([classroomId, courseId])
  @@map("classroom_courses")
}
